'''
Chapter 8 Exercises

Exercise 1

The Fibonacci sequences starts 1, 1, 2, 3, 5, 8,... Each number in the
sequence (after the first two) is the sum of the previous tow. Write a pro-
gram that computes and ouputs the nth Fibonacci number, where n is a
value entered by the user.
'''

def fib():

# This appears to be the same as the problem from chapter 3
    
# Variable definitions
# first = int
# second = int
# fib_n = int
# Total = list

    n = int(input('Input whole number >>> ' ))
    first = 0
    second = 1
    fib_n = 0
    Total = []
    
    for i in list(range(first, n)):
        if i == 1:
            fib_n = i
            Total.append(fib_n)
        else: 
            fib_n = first + second
            first = second
            second = fib_n
            Total.append(fib_n)

    print('The Fibonacci sequence at n =', n, 'is', fib_n)
    print('Proof:', Total)

'''
Exercise 2

The National Weather Service computes the windchill index using the
following formula:

    35.74 + 0.62157 * T - 35.75 * (V ** 0.16) + 0.4275 * T * (V ** 0.16)

Where T is the temperature in degrees Fahrenheit, and V is the wind speed
in miles per hour.

Write a program that prints a nicely formatted table of windchill values.
Rows should represent wind speed for 0 to 50 in 5 mph increments, and
the columns represent temperatures from -20 to +60 in 10-degree increments.
Note: the formula only applies for wind speeds in excess of 3 miles per hour.

'''

# Program does not format the data, rather saves it to a text file.
# If formatting is necessary, it would be much easier to copy + paste data
# into Microsoft Excel and then apply formatting.

def main_e2():
      
    output_file = 'C:/Users/Cole/Documents/Read files/Write here.txt'
    outfile = open(output_file, 'w')

    # Nested loop runs calculation for windspeed at each temperature
    for i in range(-20, 61, 10): # i = temperature 
        for j in range(0, 51, 5): # j = wind speed
            chill = windchill(i, j)
            print(i, '|', j, '|', chill, file=outfile)

    outfile.close()


def windchill(temp, speed):
  
    if speed <= 3:
        return 'N/A'
    else:
        return 35.74 + 0.62157 * temp - 35.75 * (speed ** 0.16) + 0.4275 * temp * (speed ** 0.16)

    
'''
Exercise 3

Write a program that uses a while loop to determine how long it takes
for an investment to double at a given interest rate. The input will be an
annualized interested rate, and the output is the number of years it takes an
investment to double.
'''

def main_e3():

    #principal = eval(input("Enter the initial principal: "))
    #apr = eval(input("Enter the annual interest rate: "))
    
    principal = 502.50
    r = 0.06
    apr = r / 12
    
    y = 2
    target = principal * y


    t = 0
    while principal <= target:
        principal = principal * (1 + apr)
        t = t + 1
        
    return print(principal, t, t /12)

'''
Exercise 4

The Syracuse (also called Collatz or Hailstone) sequence is generated by
starting with a natural number and reapeatedly applying the following func-
tions until reaching 1:

syr(x) = x/2 if x is even
syr(x) = 3x + 1 if x is odd

For example, the Syracuse sequence starting with 5 is: 5, 16, 8, 4, 2, 1. It is
an open question in mathematics whether this sequence will always go to
1 for every possible starting value.

Write a program that gets a starting value for the user and then prints
the Syracuse sequence for that starting value.
'''

def main_e4():

    x = int(input('Input a whole number >>> '))

    while x != 1:

        if x % 2: # Result will always be 1 for odd numbers (True) or 0 (False) for even
            x = 3 * x + 1
        else: 
            x = x // 2 # Used integer division since the formula will never result in a float
        print(x)
    
        
    
'''
Exercise 5

A positive whole number n > 2 is prime if no number between 2 and the
square root of n (inclusive) even divides n. Write a program that accepts
a value of n as input and determines if the value is prime. If n is not prime,
your program should quit as soon as it finds a value that evenly divides n.
'''

def main_e5():

    x = int(input('Input a natural number >>> '))
    i = 2  
    
    
    # Loop executes until a natural divisor is found
    while (x % i) and (i < x): 
        i = i + 1
    
    if (i < x) or (x <= 2):
        print('Not a prime number')
    else:
        print(x, 'is a prime number')
    
'''
Exercise 6

Modify the previous problem to find every prime number less than
or equal to n
'''

def main_e6():

    x = int(input('Input a natural number >>> '))   

    prime_numbers = []
    
    for num in range(2, x+1):
        prime = True 
        for i in range(2, num): # Loops through all numbers so far
            if not (num % i): # Checks if each i in the range works as a divisor
                prime = False 
        if prime: # If not divisors are found, then the number must be prime
            prime_numbers.append(num)

    return prime_numbers

'''
Excercise 7

The Goldbach conjecture asserts that every even number is the sum of two
prime numbers. Write a program that gets a number from the user, checks
to make sure that it is even, and then finds two prime numbers that add up to the number.
'''

def main_e7():

    
    x = 0

    # Get an integer from the user
    
    while (x == 0) or (x % 2 != 0):

        try:

            x = int(input('Enter a whole number >>> '))
            if (x % 2):
                print('\nYou must enter an even number\n')

        except:

            print('\nYou must input an integer\n')
            
    
    prime_list = prime(x)
    prime_list_2 = prime_list # Created duplicate list
  
    
    k = 0
    found = False
    
    while found == False:
        k = k + 1
        for i in prime_list:
            # Check if the sum of any two values between the parallel lists
            # is a valid match. If so, the loop will exit and print the numbers.
            if x == i + prime_list_2[k]:
                found = True
                print(i, prime_list_2[k])

# Used the function from the previous exercise to generate list of prime numbers
def prime(x):

    prime_numbers = []
    
    for num in range(2, x+1):
        prime = True 
        for i in range(2, num): # Loops through all numbers so far
            if not (num % i): # Checks if each i in the range works as a divisor
                prime = False 
        if prime: # If not divisors are found, then the number must be prime
            prime_numbers.append(num)

    return prime_numbers
 
'''
Exercise 8

The greatest common divisor (GCD) of two values can be computed using
Euclid's algorithm. Starting with the vlues m and n, we repeatedly apply
the formula: n, m = m, n%m until m is 0. At that point, n is the GCD of
the original m and n. Write a program that finds the GCD of two numbers
using this algorithm.
'''

def main_e8():

    m, n = 42, 8

    while m > 0:

        n, m = m, n%m

    return n


'''
Exercise 9

Write a program that computes the fuel efficiency of a multi-leg journey.
The program will first prompt for the starting odometer reading and then
get information about a series of legs. For each leg, the user enters the
current odometer reading and the amount of gas used (separated by a
space). The user signals the end of the trip with a blank line The program
should print out the miles per gallon achieved on each leg and the total
MPG for the trip.
'''

def main_e9():

    

    print('Enter the new odometer reading and amount of gas used below')
    print('''\nFirst enter the new odometer reading, followed by the
gallons of gas used on that leg\n''')


    final = []

    # Calculations are estimates due to use of floats
    odometer_1 = float(input('Initial odometer reading >>> '))

    while True:

        
        odometer_2 = input('Next odometer reading >>> ')

        if odometer_2 == '': break # Loop exits if user preses <enter>

        gallons = float(input('Gallons of gas >>> '))
        distance = float(odometer_2) - float(odometer_1)
        mpg = round(distance/gallons, 2)

        # Reset initial odometer reading for next loop
        odometer_1 = odometer_2      
        final.append(mpg)

    print('\n')
    k = 0
    for i in final:
        k = k + 1
        print('Leg', k, 'MPG >>> ', i)

'''
Exercise 11

Heating and cooling degree-days are measures used by utility companies
to estimate energy requirements. If the average temperature for a day is
below 60, then the number of degrees below 60 is added to the heating
degree-days. If the temperature is above 80, the amount over 80 is added
to the cooling degree-days.

Write a program that accepts a sequence of average daily temps and oomputes
the running total of cooling and heating degree-days. The program should print
these two totals after all the data has been processed.

Output the result to a file

'''

def main_e11():

    input_file = 'C:/Users/Cole/Documents/Read files/avg_temp.txt'
    output_file = 'C:/Users/Cole/Documents/Read files/Write here.txt' 

    open_file = open(input_file, 'r')
    write_file = open(output_file, 'w')

    #y = open_file.readline()
    #print(y)

    heating_days = 0
    cooling_days = 0
    
    for temp in open_file:
        temp.rstrip('\n')
        #print(line)

        if int(temp) <= 60:
            heating_days = heating_days + 1
        elif int(temp) >= 80:
            cooling_days = cooling_days + 1

    print('HEATING DAYS:', heating_days, file=write_file)
    print('COOLING DAYS:', cooling_days, file=write_file)

'''
Exercise 14

Write a program that converts a color image to grayscale. The user supplies
the name of a file containing a GIF or PPM image, and the program
loads the image and displays the file. At the click of the mouse, the program
converts the image to grayscale. The user is then prompted for a
filename to store the grayscal image in.

The basic idea for converting the image is to go through it pixel by pixel and
convert each one from color to an appropriate shade of gray. A gray pixel created
by setting its red, green, and blue components to have the same brightness. So,
color_rgb(0,0,0) is black, color_rgb(255, 255, 255) is white, and color_rgb(127,
127,127) is a gray "halfway" between. You should use a weighted average of the
original RGB values to determine the brightness of the gray. Here is the
pseudocode for the grayscale algorithm:

for each row in the image:
    for each column in the image:
        r, g, b = get pixel info for current row and column

        brightness = int(round(0.299r + 0.587g + 0.114b))
        set pixel to color_rgb(brightness, brightness, brightness)
    update the image # to see progress row by row

'''

from graphics import *

#####################
# THIS IS GARBAGE SEE BELOW
##############################

##def m():
##
##    name = 'Window'
##    win_width = 650
##    win_height = win_width
##    # Draw winow
##    win = GraphWin(name, win_width, win_height)
##    win.setCoords(0,0,650,650)
##    win.setBackground("white")
##
##    
##    file = 'C:/Users/Cole/Documents/Read files/IRON_MAIDEN.ppm'
##    
##    a = Point(300, 300)
##    # Draw image
##    # Image(a, file).draw(win)
##
##    pic = Image(a, file)
##    columns = pic.getWidth()
##    rows = pic.getHeight()
##
##    #print(w, h)
##
##    #print(Image(a, file).getPixel(10,10))
##    new = Image(Point(250,250), rows, columns)
##    #new.draw(win)
##
##    #grayscale.draw(win)
##    for i in range(rows+1):
##        for j in range(columns+1):
##            colors = Image(a, file).getPixel(i, j)
##            r, g, b = int(colors[0]), int(colors[1]), int(colors[2])
##            brightness = int(round(0.299*r + 0.587*g + 0.114*b))
##            # print(r, g, b, brightness)
##            new.setPixel(i, j, color_rgb(brightness, brightness, brightness)).draw(win) 
            
def t():

    win = GraphWin('test window', 500, 500)
    win.setCoords(0,0,650,650)
    win.setBackground("white")

       
    file = 'C:/Users/Cole/Documents/Read files/IRON_MAIDEN.ppm'
    new = Image(Point(300,100), 128, 128) 

    pic = Image(Point(300,300), file)

    #columns = pic.getWidth()
    #rows = pic.getHeight()
    
    for i in range(128):
        for j in range(128):
            colors = pic.getPixel(i, j)
            r, g, b = int(colors[0]), int(colors[1]), int(colors[2])
            brightness = int(round(0.299*r + 0.587*g + 0.114*b))
            new.setPixel(i,j, color_rgb(brightness, brightness, brightness))

    new.draw(win)
    pic.draw(win)
    


#print(grayscale.getPixel(0,0))        
            

        
    
    
    

  


        
    
        
   



    
    
    



































    






